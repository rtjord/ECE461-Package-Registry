# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ece461team5
# "service" is the name of this project. This will also be added to your AWS resource names.
service: backend

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2

functions:
  packagesList:
    handler: src/handlers/packagesList.handler  # path to handler function
    # Memory size (default: 1024MB)
    memorySize: 512
    # Timeout (default: 6 seconds)
    timeout: 3
    environment:
      # Environment variables
    description: "List all packages."
    events:
      - http:
          path: packages
          method: post
          cors: true
          request:
            parameters:
              query:
                offset: false
              headers:
                X-Authorization: true # Required header
            body:
              description: "Request body containing an array of PackageQuery objects."
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/PackageQuery'
            responses:
              '200':
                description: "List of packages"
                headers:
                  offset:
                    description: "The offset to use in the next query."
                    schema:
                      $ref: '#/components/schemas/EnumerateOffset'
                body:
                  type: array
                  items:
                    $ref: '#/components/schemas/PackageMetadata'
              '400':
                description: "There is missing field(s) in the PackageQuery or it is formed improperly, or is invalid."
              '403':
                description: "Authentication failed due to invalid or missing AuthenticationToken."
              '413':
                description: "Too many packages returned."

  registryReset:
    handler: src/handlers/registryReset.handler
    events:
      - http:
          path: reset
          method: delete
          request:
            parameters:
              headers:
                X-Authorization: true
                schema:
                  $ref: '#/components/schemas/AuthenticationToken'
          responses:
            '200':
              description: "Registry is reset."
            '401':
              description: "You do not have permission to reset the registry."
            '403':
              description: "Authentication failed due to invalid or missing AuthenticationToken."
  
  getPackageById:
      handler: handler.getPackageById
      events:
        - http:
            path: packages/{id}
            method: get
            cors: true
            request:
              parameters:
                paths:  # Path parameters
                  id:
                    description: "ID of package to fetch."
                    required: true
                    schema:
                      $ref: '#/components/schemas/PackageID'
            responses:
              '200':
                description: "Return the package. Cncent is required"
                content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Package'
              '400':
                description: "There is missing field(s) in the PackageID or it is formed improperly, or is invalid."
              '403':
                description: "Authentication failed due to invalid or missing AuthenticationToken."
              '404':
                description: "Package does nt exist."

  updatePackage:
    handler: handler.updatePackage
    events:
      - http:
          path: packages/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: 
                  required: true
            headers:
              X-Authorization: true
          responses:
            '200':
              description: 'Version is updated.'
            '400':
              description: 'There is missing field(s) in the PackageID or it is formed improperly, or is invalid.'
            '403':
              description: 'Authentication failed due to invalid or missing AuthenticationToken.'
            '404':
              description: 'Package does not exist.'

  deletePackage:
    handler: handler.deletePackage
    events:
      - http:
          path: packages/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
            headers:
              X-Authorization: true
          cors: true

  authenticate:
    handler: src/handlers/authenticate.handler # Replace with your handler file and function
    events:
      - http:
          path: authenticate
          method: put
          cors: true # Enable CORS if necessary
          request:
            schema:
              application/json:
                # Include the schema for AuthenticationRequest here
                "$ref": "#/components/schemas/AuthenticationRequest" # Reference to your schema
            body:
              content:
                application/json:
                  schema:
                    "$ref": "#/components/schemas/AuthenticationRequest"
                  examples:
                    ExampleRequest:
                      value:
                        User:
                          name: ece30861defaultadminuser
                          isAdmin: true
                        Secret:
                          password: correcthorsebatterystaple123(!__+@**(A'"`;DROP TABLE packages;
          responses:
            "200":
              description: Return an AuthenticationToken.
              body:
                content:
                  application/json:
                    schema:
                      "$ref": "#/components/schemas/AuthenticationToken"
                    examples:
                      ExampleResponse:
                        value: '"bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"'
            "400":
              description: There are missing field(s) in the AuthenticationRequest or it is formed improperly.
            "401":
              description: The user or password is invalid.
            "501":
              description: This system does not support authentication.
  packageByName:
    handler: src/handlers/packageByName.handler  # Path to your function handler
    events:
      - http:
          path: package/byName/{name}
          method: get
          request:
            parameters:
              paths:
                name: true
              headers:
                X-Authorization: true
            responses:
              '200':
                description: Return the package history.
                bodyType: PackageHistoryEntry[]  # Refer to your schema
              '400':
                description: There are missing fields in the PackageName or it is formed improperly, or is invalid.
              '403':
                description: Authentication failed due to invalid or missing AuthenticationToken.
              '404':
                description: No such package.

  packageByRegEx:
    handler: src/handlers/packageByRegEx.handler
    events:
      - http:
          path: package/byRegEx
          method: post
          request:
            body:
              type: object
              properties:
                RegEx:
                  type: string
              required:
                - RegEx
            headers:
              X-Authorization: true
            responses:
              '200':
                description: Return a list of packages.
                bodyType: PackageMetadata[]  # Refer to your schema
              '400':
                description: There are missing fields in the PackageRegEx or it is formed improperly, or is invalid.
              '403':
                description: Authentication failed due to invalid or missing AuthenticationToken.
              '404':
                description: No package found under this regex.
  getTracks:
    handler: src/handlers/getTracks.handler
    events:
      - http:
          path: tracks
          method: get
          cors: true
          responses:
            "200":
              description: Return the list of tracks the student plans to implement
              body:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        plannedTracks:
                          type: array
                          description: "List of tracks the student plans to implement"
                          items:
                            type: string
                            enum:
                              - "Performance track"
                              - "Access control track"
                              - "High assurance track"
                              - "ML inside track"
            "500":
              description: The system encountered an error while retrieving the student's track information.

layers:
  # A Lambda layer
  servicesLayer:
    # required, path to layer contents on disk
    path: src/services
    # optional, Description to publish to AWS
    description: Description of what the lambda layer does
    # optional, a list of runtimes this layer is compatible with
    compatibleRuntimes:
      - nodejs18.x
    # optional, a list of AWS account IDs allowed to access this layer.
    allowedAccounts:
      - '*'
    # optional, false by default. If true, layer versions are not deleted as new ones are created
    retain: false

resources:
  Resources:
    ApiGatewayRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: ECE 461 - Fall 2024 - Project Phase 2
        Description: "API Gateway for ECE 461 - Fall 2024 - Project Phase 2"
        FailOnWarnings: true

    # DynamoDB table for storing package metadata
    MetaDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PackageMetaData
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # Example schema definition (if needed)

    # DynamoDB table for storing user information
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: isAdmin
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    PackageQuery:
      Type: 'AWS::ApiGateway::Model'
      Properties:
        ContentType: 'application/json'
        Schema: 
          # Your JSON Schema for PackageQuery here

    PackageMetadata:
      Type: 'AWS::ApiGateway::Model'
      Properties:
        ContentType: 'application/json'
        Schema:
          # Your JSON Schema for PackageMetadata here
    
    AuthenticationToken:
      Type: 'AWS::ApiGateway::Model'
      Properties:
        ContentType: 'application/json'
        Schema:
          # Your JSON Schema for AuthenticationToken here

components:
  schemas:
    Package:
      required:
        - metadata
        - data
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/PackageMetadata'
        data:
          $ref: '#/components/schemas/PackageData'
          
    PackageMetadata:
      description: |-
        The "Name" and "Version" are used as a unique identifier pair when uploading a package.
        The "ID" is used as an internal identifier for interacting with existing packages.
      required:
        - Name
        - Version
        - ID
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/PackageName'
        Version:
          description: Package version
          type: string
          example: 1.2.3
        ID:
          $ref: '#/components/schemas/PackageID'

    PackageData:
      description: |-
        This is a "union" type.
        - On package upload, either Content or URL should be set. If both are set, returns 400.
        - On package update, exactly one field should be set.
        - On download, the Content field should be set.
      type: object
      properties:
        Content:
          description: |-
            Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).
            This will be a zipped version of an npm package's GitHub repository, minus the ".git/" directory." It will, for example, include the "package.json" file that can be used to retrieve the project homepage.
            See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.
          type: string
        URL:
          description: Package URL (for use in public ingest).
          type: string
        debloat:
          description: If true, remove unnecessary bloat from the package. You may wish to read about tree shaking, minification, etc.
          type: boolean
        JSProgram:
          description: A JavaScript program (for use with sensitive modules).
          type: string

    User:
      description: ""
      required:
        - name
        - isAdmin
      type: object
      properties:
        name:
          description: ""
          type: string
          example: Alfalfa
        isAdmin:
          description: Is this user an admin?
          type: boolean

    UserAuthenticationInfo:
      description: Authentication info for a user
      required:
        - password
      type: object
      properties:
        password:
          description: "Password for a user. Per the spec, this should be a \"strong\" password."
          type: string

    PackageID:
      description: "Unique ID for use with the /package/{id} endpoint."
      example: "123567192081501"
      type: string
      pattern: '^[a-zA-Z0-9\-]+$'
      
    PackageCost:
      description: |-
        Package Cost is the collection of total cost of package given in terms of total Megabytes (mb) that needs to be downloaded. It consists of a map with key of the map as the package ID and its value consists of total cost as described below.
      type: object
      additionalProperties:
        type: object
        properties:
          standaloneCost:
            type: number
            description: The standalone cost of this package excluding dependencies. This field is only required in case `dependency = true`, in the request.
          totalCost:
            type: number
            description: |
              The total cost of the package. When `dependency` is not set, this should return the standalone cost,
              and when it is set, this field should return the sum of the costs of all the dependencies.
              For example:
                Package 1 -> Package 2 -> Package 3, Package 4.
                If dependency = false
                  totalCost = (Package 1).size()
                If dependency = true 
                  totalCost = (Package 1 + Package 2 + Package 3 + Package 4).size()
        required:
          - totalCost

    PackageRating:
      description: |-
        Package rating (cf. Project 1).
        If the Project 1 that you inherited does not support one or more of the original properties, denote this with the value "-1".
      required:
        - RampUp
        - Correctness
        - BusFactor
        - ResponsiveMaintainer
        - LicenseScore
        - GoodPinningPractice
        - PullRequest
        - NetScore
        - RampUpLatency
        - CorrectnessLatency
        - BusFactorLatency
        - ResponsiveMaintainerLatency
        - LicenseScoreLatency
        - GoodPinningPracticeLatency
        - PullRequestLatency
        - NetScoreLatency
      type: object
      properties:
        BusFactor:
          format: double
          description: ""
          type: number
        BusFactorLatency:
          format: double
          description: ""
          type: number
        Correctness:
          format: double
          description: ""
          type: number
        CorrectnessLatency:
          format: double
          description: ""
          type: number
        RampUp:
          format: double
          description: ""
          type: number
        RampUpLatency:
          format: double
          description: ""
          type: number
        ResponsiveMaintainer:
          format: double
          description: ""
          type: number
        ResponsiveMaintainerLatency:
          format: double
          description: ""
          type: number
        LicenseScore:
          format: double
          description: ""
          type: number
        LicenseScoreLatency:
          format: double
          description: ""
          type: number
        GoodPinningPractice:
          format: double
          description: "The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ = 0.5 rating)."
          type: number
        GoodPinningPracticeLatency:
          format: double
          description: ""
          type: number
        PullRequest:
          format: double
          description: The fraction of project code that was introduced through pull requests with a code review.
          type: number
        PullRequestLatency:
          format: double
          description: The fraction of project code that was introduced through pull requests with a code review.
          type: number
        NetScore:
          format: double
          description: Scores calculated from other seven metrics.
          type: number
        NetScoreLatency:
          format: double
          description: Scores calculated from other seven metrics.
          type: number

    PackageHistoryEntry:
      description: One entry of the history of this package.
      required:
        - User
        - Date
        - PackageMetadata
        - Action
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: ""
        Date:
          format: date-time
          description: Date of activity using ISO-8601 Datetime standard in UTC format.
          type: string
          example: 2023-03-23T23:11:15Z
        PackageMetadata:
          $ref: '#/components/schemas/PackageMetadata'
          description: ""
        Action:
          description: ""
          enum:
            - CREATE
            - UPDATE
            - DOWNLOAD
            - RATE
          type: string

    PackageName:
      description: |-
        Name of a package.
        - Names should only use typical "keyboard" characters.
        - The name "*" is reserved. See the `/packages` API for its meaning.
      type: string

    AuthenticationToken:
      description: "The spec permits you to use any token format you like. You could, for example, look into JSON Web Tokens (\"JWT\", pronounced \"jots\"): https://jwt.io."
      type: string

    AuthenticationRequest:
      description: ""
      required:
        - User
        - Secret
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
          description: ""
        Secret:
          $ref: '#/components/schemas/UserAuthenticationInfo'
          description: ""

    SemverRange:
      description: ""
      type: string
      example: |-
        Exact (1.2.3)
        Bounded range (1.2.3-2.1.0)
        Carat (^1.2.3)
        Tilde (~1.2.0)

    PackageQuery:
      description: ""
      required:
        - Name
      type: object
      properties:
        Version:
          $ref: '#/components/schemas/SemverRange'
          description: ""
        Name:
          $ref: '#/components/schemas/PackageName'
          description: ""

    EnumerateOffset:
      description: Offset in pagination.
      type: string
      example: "1"

    PackageRegEx:
      description: ""
      required:
        - RegEx
      type: object
      properties:
        RegEx:
          description: A regular expression over package names and READMEs that is used to search packages.
          type: string

    PackageSuggestion:
      description: A suggestion for a package (based on popularity, etc.).
      required:
        - PackageName
        - PackageMetadata
        - Rank
      type: object
      properties:
        PackageName:
          $ref: '#/components/schemas/PackageName'
        PackageMetadata:
          $ref: '#/components/schemas/PackageMetadata'
        Rank:
          type: integer
          description: |
            Rank can be computed based on download counts or some other ranking.
            E.g., Popularity of package is 1.
