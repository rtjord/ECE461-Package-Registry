AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for Lambda functions and API Gateway


Resources:


  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      # DefinitionBody: 
      #   Fn::Transform:
      #     Name: AWS::Include
      #     Parameters:
      #       Location: ./open_api/ece461-project-phase2-fall2024-updated.yaml

  PackageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PackageMetadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: PackageName
          AttributeType: S
        - AttributeName: Version
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH  # Partition Key
      GlobalSecondaryIndexes:
        - IndexName: PackageNameVersionIndex
          KeySchema:
            - AttributeName: PackageName
              KeyType: HASH  # Partition Key for the GSI
            - AttributeName: Version
              KeyType: RANGE  # Sort Key for the GSI
          Projection:
            ProjectionType: ALL

  PackageHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PackageHistoryTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PackageName
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: PackageName
          KeyType: HASH # Partition key
        - AttributeName: Date
          KeyType: RANGE # Sort key

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH

  PackageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "package-files-${Stage}"
      AccessControl: Private

  RegistryReset:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/RegistryReset
      MemorySize: 128
      Timeout: 3
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path : /reset
            Method: delete
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref PackageBucket
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref PackageMetadataTable
        - DynamoDBWritePolicy:
            TableName: !Ref PackageHistoryTable
        - S3WritePolicy:
            BucketName: !Ref PackageBucket
  
  PackageByNameGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageByNameGet
      MemorySize: 128
      Timeout: 3
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/byName/{name}
            Method: get
            RequestParameters:
              method.request.path.name: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageHistoryTable
  
  PackageRetrieve:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageRetrieve
      MemorySize: 128
      Timeout: 10
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/{id}
            Method: get
            RequestParameters:
              method.request.path.id: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageMetadataTable

  PackageCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageCreate
      MemorySize: 512
      Timeout: 120
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 

      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi   # Reference the API defined above
            Path: /package
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageMetadataTable
        - DynamoDBWritePolicy:
            TableName: !Ref PackageHistoryTable
      Environment:
        Variables:
          S3_BUCKET_NAME: !Sub "package-files-${Stage}"

  PackageDelete:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageDelete
      MemorySize: 128
      Timeout: 3
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackageMetadataTable

  PackageUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageUpdate
      MemorySize: 128
      Timeout: 3
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 

      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/{id}
            Method: put
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref PackageBucket

  GetCost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/GetCost
      MemorySize: 128
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 

      Timeout: 3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/{id}/cost
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageMetadataTable
            
  PackageByRegEx:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: dist/handlers/PackageByRegEx
      MemorySize: 128
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      Timeout: 3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /package/byRegEx
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageMetadataTable

  GetTracks:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - arn:aws:lambda:us-east-2:122610496633:layer:consolidation:2 
      CodeUri: dist/handlers/GetTracks
      MemorySize: 128
      Timeout: 3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /tracks
            Method: get

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Stage name
